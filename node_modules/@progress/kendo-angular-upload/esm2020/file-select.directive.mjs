/**-----------------------------------------------------------------------------------------
* Copyright © 2023 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Directive, ElementRef, HostBinding, HostListener, Input } from '@angular/core';
import { NavigationService } from './navigation.service';
import { UploadService } from './upload.service';
import { assignGuidToFiles, inputFiles } from './common/util';
import { validateFiles } from './common/validation-util';
import * as i0 from "@angular/core";
import * as i1 from "./upload.service";
import * as i2 from "./navigation.service";
/**
 * @hidden
 */
export class FileSelectDirective {
    constructor(uploadService, navigation, el) {
        this.uploadService = uploadService;
        this.navigation = navigation;
        this.type = "file";
        this.autocomplete = "off";
        this.tabIndex = -1;
        this.element = el;
    }
    get nameAttribute() {
        return this.uploadService.async.saveField;
    }
    get multipleAttribute() {
        return this.multiple ? "multiple" : null;
    }
    get dirAttribute() {
        return this.dir;
    }
    get disabledAttribute() {
        return this.disabled ? "true" : null;
    }
    onInputChange(event) {
        const ua = navigator.userAgent;
        const webkit = /(webkit)[ \/]([\w.]+)/i;
        const ie = /(windows)[ \/]([\w.]+)/i;
        let selectedFiles = inputFiles(event.target);
        selectedFiles = assignGuidToFiles(selectedFiles, !this.uploadService.async.batch);
        validateFiles(selectedFiles, this.restrictions);
        if (!this.multiple) {
            this.uploadService.clearFiles();
        }
        this.uploadService.addFiles(selectedFiles);
        /*
        Chrome, IE, Edge and Safari do not trigger a `change` event
        when a file with the same name is selected a number of consecutive times.
        As a workaround, clear the input value after handling the file.
        */
        const native = this.element.nativeElement;
        if (ua.match(webkit) || ua.match(ie)) {
            native.type = "";
            native.type = "file";
        }
        setTimeout(() => {
            this.navigation.focusedIndex = -1;
        });
    }
}
FileSelectDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: FileSelectDirective, deps: [{ token: i1.UploadService }, { token: i2.NavigationService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
FileSelectDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.12", type: FileSelectDirective, selector: "[kendoFileSelect]", inputs: { dir: "dir", disabled: "disabled", multiple: "multiple", restrictions: "restrictions" }, host: { listeners: { "change": "onInputChange($event)" }, properties: { "attr.type": "this.type", "attr.autocomplete": "this.autocomplete", "attr.tabindex": "this.tabIndex", "attr.name": "this.nameAttribute", "attr.multiple": "this.multipleAttribute", "attr.dir": "this.dirAttribute", "attr.disabled": "this.disabledAttribute" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: FileSelectDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[kendoFileSelect]'
                }]
        }], ctorParameters: function () { return [{ type: i1.UploadService }, { type: i2.NavigationService }, { type: i0.ElementRef }]; }, propDecorators: { dir: [{
                type: Input
            }], disabled: [{
                type: Input
            }], multiple: [{
                type: Input
            }], restrictions: [{
                type: Input
            }], type: [{
                type: HostBinding,
                args: ["attr.type"]
            }], autocomplete: [{
                type: HostBinding,
                args: ["attr.autocomplete"]
            }], tabIndex: [{
                type: HostBinding,
                args: ["attr.tabindex"]
            }], nameAttribute: [{
                type: HostBinding,
                args: ["attr.name"]
            }], multipleAttribute: [{
                type: HostBinding,
                args: ["attr.multiple"]
            }], dirAttribute: [{
                type: HostBinding,
                args: ["attr.dir"]
            }], disabledAttribute: [{
                type: HostBinding,
                args: ["attr.disabled"]
            }], onInputChange: [{
                type: HostListener,
                args: ["change", ["$event"]]
            }] } });
