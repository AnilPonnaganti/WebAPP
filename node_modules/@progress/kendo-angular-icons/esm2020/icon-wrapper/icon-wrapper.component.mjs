/**-----------------------------------------------------------------------------------------
* Copyright © 2023 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Component, HostBinding, Input } from '@angular/core';
import { Subscription } from 'rxjs';
import { IconsService } from '../common/icons.service';
import * as i0 from "@angular/core";
import * as i1 from "../common/icons.service";
import * as i2 from "../svg-icon/svg-icon.component";
import * as i3 from "../icon/icon.component";
import * as i4 from "@angular/common";
/**
 * @hidden
 */
export class IconWrapperComponent {
    constructor(iconsService) {
        this.iconsService = iconsService;
        this.hostClass = true;
        /**
         * Provided by consuming components in case an additional k-specific class needs to be rendered
         * on the internal Icon component.
         */
        this.innerCssClass = '';
        /**
         * Provided by consuming components in case a custom font icon class is set
         * by the developer using the consuming component through its API.
         */
        this.customFontClass = '';
        this.subs = new Subscription();
        this.subs = iconsService.changes.subscribe(iconSettings => {
            this.iconSettings = iconSettings;
        });
    }
    get customClasses() {
        const classes = [this.customFontClass, this.innerCssClass, this.customFontIconClass].filter(cl => !!cl).join(' ');
        return classes;
    }
    get getSvgIcon() {
        return this.iconsService.getSvgIcon(this.name) || this.svgIcon;
    }
    get customFontIconClass() {
        return this.iconsService.getCustomFontIconClass(this.name) || this.customFontClass;
    }
    ngOnDestroy() {
        this.subs.unsubscribe();
    }
}
IconWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: IconWrapperComponent, deps: [{ token: i1.IconsService }], target: i0.ɵɵFactoryTarget.Component });
IconWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.12", type: IconWrapperComponent, selector: "kendo-icon-wrapper", inputs: { name: "name", svgIcon: "svgIcon", innerCssClass: "innerCssClass", customFontClass: "customFontClass" }, host: { properties: { "class.k-icon-wrapper-host": "this.hostClass" } }, exportAs: ["kendoIconWrapper"], ngImport: i0, template: `
        <kendo-svg-icon
            *ngIf="iconSettings?.type === 'svg'; else font"
            [ngClass]="innerCssClass"
            [icon]="getSvgIcon"
            [size]="iconSettings?.size"
            [themeColor]="iconSettings?.themeColor"
            [flip]="iconSettings?.flip"></kendo-svg-icon>
        <ng-template #font>
            <kendo-icon
                *ngIf="!customFontIconClass; else custom"
                [ngClass]="innerCssClass"
                [name]="name"
                [size]="iconSettings?.size"
                [themeColor]="iconSettings?.themeColor"
                [flip]="iconSettings?.flip"></kendo-icon>
            <ng-template #custom>
                <span [ngClass]="customClasses"></span>
            </ng-template>
        </ng-template>
    `, isInline: true, components: [{ type: i2.SVGIconComponent, selector: "kendo-svg-icon", inputs: ["icon"], exportAs: ["kendoSVGIcon"] }, { type: i3.IconComponent, selector: "kendo-icon", inputs: ["name"], exportAs: ["kendoIcon"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: IconWrapperComponent, decorators: [{
            type: Component,
            args: [{
                    exportAs: 'kendoIconWrapper',
                    selector: 'kendo-icon-wrapper',
                    template: `
        <kendo-svg-icon
            *ngIf="iconSettings?.type === 'svg'; else font"
            [ngClass]="innerCssClass"
            [icon]="getSvgIcon"
            [size]="iconSettings?.size"
            [themeColor]="iconSettings?.themeColor"
            [flip]="iconSettings?.flip"></kendo-svg-icon>
        <ng-template #font>
            <kendo-icon
                *ngIf="!customFontIconClass; else custom"
                [ngClass]="innerCssClass"
                [name]="name"
                [size]="iconSettings?.size"
                [themeColor]="iconSettings?.themeColor"
                [flip]="iconSettings?.flip"></kendo-icon>
            <ng-template #custom>
                <span [ngClass]="customClasses"></span>
            </ng-template>
        </ng-template>
    `
                }]
        }], ctorParameters: function () { return [{ type: i1.IconsService }]; }, propDecorators: { hostClass: [{
                type: HostBinding,
                args: ['class.k-icon-wrapper-host']
            }], name: [{
                type: Input
            }], svgIcon: [{
                type: Input
            }], innerCssClass: [{
                type: Input
            }], customFontClass: [{
                type: Input
            }] } });
